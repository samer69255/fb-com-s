#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fb-comment-bot:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '30000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var io = require('socket.io')(server);
var list = [];

var request = require('request');



function start() {
    var host = 'https://graph.facebook.com';
    var token = 'EAAAAUaZA8jlABADko9hX0iFBKSrdFyMJb44bEZCMVKDTT7osRSaGjjF6hpu1TIXA4V57q0MIVCKD2wvyxyQiIeD5gy6NWP94vWOq5MPKU5dZAYDB5MvLZBT0cnGOG1crwzM1bpm8CSVUFsZCZCAkkYgHzeb9AwnPiozU4SuhHMPcjqbfeaWbNX8G3zDQp46gIZD';
    var post_id = '100005937433824_742667225941185';
    var url = host+'/v2.10/'+post_id+'/comments';
    s = new comment(url,0,token);
   //s.send(1);
   //s.send(++n);
}



function check(token,fn) {
    var url = 'https://graph.facebook.com/v2.10/me?fields=id&access_token='+token;
    var op = {
        headers: {'content-type': 'application/x-www-form-urlencoded'},
        url: url,
    }

    request.get(op, fn
);
}


function comment(url,token) {
  this.url = url;
  this.status = 'stop';
  this.mess = '';
  this.token = token;
  this.n = 1;
  this.succ = 0;
  var self = this;
  this.onSuccess = function () {

  }
  this.send = function (comm,fun) {
      if (fun) {
          this.onSuccess = fun;
          delete fun;
      }

      this.mess = 'bot test #'+comm;
   // console.log(this.token);
      request.post({
          headers: {'content-type' : 'application/x-www-form-urlencoded'},
          url:     this.url,
          form:   {
              access_token:this.token,
              message:this.mess.toString()
          }
      }, this.onSuccess);
  }

  //this.run = true;
  this.stop = function (txt) {
      this.run = false;
      if (txt) this.status = txt;
      else this.status = 'stop';
  }

}

start();

io.on("connection",function (socket) {

    for (var i in list)
    {
        var sn = list[i];
       // delete sn.access_token;
        socket.emit('add',JSON.stringify(sn));
    }


    socket.on("add",function (ms) {
        var id;
        var u = JSON.parse(ms);
        socket.emit("status",JSON.stringify({
            text:'check from access token',
            color:'green'
        }));
        check(u.access_token,function (error,body) {

            if (JSON.parse(body.body).id)
            {
                id = JSON.parse(body.body).id;
                console.log(id);
                socket.emit("status", JSON.stringify({
                    text:'done',
                    color:'green',
                    done:true
                }));

                var post = u.page + "_" + u.post;
                var host = 'https://graph.facebook.com'
                var url = host+'/v2.10/'+post+'/comments';
                var _s = new comment(url,u.access_token);
                _s.id = u.post + '_' + getRandom();
                _s.name = u.post;
                _s.type = u.type;
                if (_s.type == 'number' && _s.v == 'n')
                _s.v = Infinity;
                else
                    _s.v = u.v;
                list[_s.id] = _s;
               // delete _s.access_token;
                socket.emit('add',JSON.stringify(_s));
               // socket.emit('html',JSON.stringify(list));
                 console.log(list);
            }
            else
            {
                console.log(body.body);
                socket.emit("status", JSON.stringify({
                    text:'error',
                    color:'red',
                    error:true
                }));
            }
        });

    });

    socket.on("stop",function (id) {
            console.log('stopped');
            list[id].stop();
            io.sockets.emit('stop',id);
    });

    socket.on("start",function (id) {
            console.log(id);

            io.sockets.emit('start',id);

            var ob =  list[id];
            ob.run = true;
            ob.status = 'running';
            if (ob.type == 'number')
            ob.send(ob.n,function (e,body,resp) {
                onSent(e,body,resp,ob);
            });
            else
                ob.send(ob.v[ob.n - 1],function (e,body,resp) {
                    onSent(e,body,resp,ob);
                });
    });

    socket.on("del",function (id) {


            io.sockets.emit('del',id);

            list[id].stop();

            delete list[id];
    });

    socket.on("reset",function (id) {

    });

    socket.on("restart",function (id) {
        reset_commet(id);
        list[id].send(list[id].n);
        io.sockets.emit('start', id);
    });



});

function getRandom() {
    return Math.floor((Math.random() * 9999999999) + 1);
}

function onSent(error, response, body, ob){

    console.log(body);

    var body = JSON.parse(body);
    if (body.error)
    {
        ob.stop();
        io.sockets.emit('err',ob.id);
        return;
    }
    console.log(ob.v + '<==' + ob.n+1);
    ob.n++;
    ob.succ++;
    io.sockets.emit('set',JSON.stringify({
        new:ob.succ,
        id:ob.id
    }));

    if (ob.type == 'number')
    {
        if (ob.v <= ob.n-1) {ob.stop('comple');
        io.sockets.emit('comple',ob.id);
        }
        if (ob.run)
        {
            ob.send(ob.n);
        }


    }
    else
    {
        if (ob.v.length+1 <= ob.n) {ob.stop('comple'); }
        if (ob.run)
        {
            ob.send(ob.v[ob.n-1]);
        }
    }



}


function reset_commet(id) {
    list[id].succ = 0;
    list[id].n = 1;
}